#ifndef __UNIT_UHF_RFID_H__
#define __UNIT_UHF_RFID_H__
#include <stdio.h>
#include <stdint.h>
#include "string.h"
#include "driver/gpio.h"
#include "driver/uart.h"
#include "esp_system.h"
#include "esp_log.h"
#include "freertos/FreeRTOS.h"
#include "freertos/task.h"
#include "freertos/queue.h"
#include "freertos/event_groups.h"
#include "ESP32_Infor.h"

//#define MULRFID_NEW_CODE

#define TEST_UHF_RFID_WATCH
#ifdef TEST_UHF_RFID_WATCH

#define UHF_RFID_UART UART_NUM_2
// #define TXD_UART_PIN (GPIO_NUM_21)
// #define RXD_UART_PIN (GPIO_NUM_20)

#if 00 //COn so 5 20
#define TXD_UART_PIN (GPIO_NUM_12)
#define RXD_UART_PIN (GPIO_NUM_14)
#endif

#if 01
#define TXD_UART_PIN (GPIO_NUM_11)
#define RXD_UART_PIN (GPIO_NUM_14)
#endif

#define UHF_RFID_UART_BAUDRATE 115200

#define CR 0x0D
#define LF 0x0A

#define TIME_TO_CLEAR_MONITOR_CARD 2500

typedef enum {
  UHF_RFID_NG = 0,
  UHF_RFID_OK,
} UHF_RFID_status;

typedef struct {
  CARD card;
  uint8_t repeatCount;    //Biến lưu số lần đọc lại của thẻ
  uint32_t firstTimeReadThisCard; //Biến lưu thời gian đầu tiên đọc được thẻ, thời gian này sẽ được làm mới nếu thẻ được đọc lại vượt quá Timeout
  int8_t maxOfRSSIReceived;   //Lưu giá trị RSSI lớn nhất từng thu được
} checkCardInputMode_typedef;

extern QueueHandle_t x_AliveCard_2_LCD_Task_Queue; //Gửi mảng chứa các thẻ đang alive tới màn hình


// Bảng tra cứu CRC-16/GENIBUS
static const uint16_t crc16_genibus_table[256] = {
    0x0000, 0x1021, 0x2042, 0x3063, 0x4084, 0x50A5, 0x60C6, 0x70E7,
    0x8108, 0x9129, 0xA14A, 0xB16B, 0xC18C, 0xD1AD, 0xE1CE, 0xF1EF,
    0x1231, 0x0210, 0x3273, 0x2252, 0x52B5, 0x4294, 0x72F7, 0x62D6,
    0x9339, 0x8318, 0xB37B, 0xA35A, 0xD3BD, 0xC39C, 0xF3FF, 0xE3DE,
    0x2462, 0x3443, 0x0420, 0x1401, 0x64E6, 0x74C7, 0x44A4, 0x5485,
    0xA56A, 0xB54B, 0x8528, 0x9509, 0xE5EE, 0xF5CF, 0xC5AC, 0xD58D,
    0x3653, 0x2672, 0x1611, 0x0630, 0x76D7, 0x66F6, 0x5695, 0x46B4,
    0xB75B, 0xA77A, 0x9719, 0x8738, 0xF7DF, 0xE7FE, 0xD79D, 0xC7BC,
    0x48C4, 0x58E5, 0x6886, 0x78A7, 0x0840, 0x1861, 0x2802, 0x3823,
    0xC9CC, 0xD9ED, 0xE98E, 0xF9AF, 0x8948, 0x9969, 0xA90A, 0xB92B,
    0x5AF5, 0x4AD4, 0x7AB7, 0x6A96, 0x1A71, 0x0A50, 0x3A33, 0x2A12,
    0xDBFD, 0xCBDC, 0xFBBF, 0xEB9E, 0x9B79, 0x8B58, 0xBB3B, 0xAB1A,
    0x6CA6, 0x7C87, 0x4CE4, 0x5CC5, 0x2C22, 0x3C03, 0x0C60, 0x1C41,
    0xEDAE, 0xFD8F, 0xCDEC, 0xDDCD, 0xAD2A, 0xBD0B, 0x8D68, 0x9D49,
    0x7E97, 0x6EB6, 0x5ED5, 0x4EF4, 0x3E13, 0x2E32, 0x1E51, 0x0E70,
    0xFF9F, 0xEFBE, 0xDFDD, 0xCFBC, 0xBF1B, 0xAF3A, 0x9F59, 0x8F78,
    0x9188, 0x81A9, 0xB1CA, 0xA1EB, 0xD10C, 0xC12D, 0xF14E, 0xE16F,
    0x1080, 0x00A1, 0x30C2, 0x20E3, 0x5004, 0x4025, 0x7046, 0x6067,
    0x83B9, 0x9398, 0xA3FB, 0xB3DA, 0xC33D, 0xD31C, 0xE37F, 0xF35E,
    0x02B1, 0x1290, 0x22F3, 0x32D2, 0x4235, 0x5214, 0x6277, 0x7256,
    0xB5EA, 0xA5CB, 0x95A8, 0x8589, 0xF56E, 0xE54F, 0xD52C, 0xC50D,
    0x34E2, 0x24C3, 0x14A0, 0x0481, 0x7466, 0x6447, 0x5424, 0x4405,
    0xA7DB, 0xB7FA, 0x8799, 0x97B8, 0xE75F, 0xF77E, 0xC71D, 0xD73C,
    0x26D3, 0x36F2, 0x0691, 0x16B0, 0x6657, 0x7676, 0x4615, 0x5634,
    0xD94C, 0xC96D, 0xF90E, 0xE92F, 0x99C8, 0x89E9, 0xB98A, 0xA9AB,
    0x5844, 0x4865, 0x7806, 0x6827, 0x18C0, 0x08E1, 0x3882, 0x28A3,
    0xCB7D, 0xDB5C, 0xEB3F, 0xFB1E, 0x8BF9, 0x9BD8, 0xABBB, 0xBB9A,
    0x4A75, 0x5A54, 0x6A37, 0x7A16, 0x0AF1, 0x1AD0, 0x2AB3, 0x3A92,
    0xFD2E, 0xED0F, 0xDD6C, 0xCD4D, 0xBDAA, 0xAD8B, 0x9DE8, 0x8DC9,
    0x7C26, 0x6C07, 0x5C64, 0x4C45, 0x3CA2, 0x2C83, 0x1CE0, 0x0CC1,
    0xEF1F, 0xFF3E, 0xCF5D, 0xDF7C, 0xAF9B, 0xBFBA, 0x8FD9, 0x9FF8,
    0x6E17, 0x7E36, 0x4E55, 0x5E74, 0x2E93, 0x3EB2, 0x0ED1, 0x1EF0
};

char* hex2str(uint8_t num);

uint8_t waitMsg(unsigned long timerout); //Kiểm tra gói tin có hợp lệ hay không
uint8_t waitMsgWhenPolling(uint16_t *startIndex, uint16_t * receivedBytes); //Kiểm tra xem hiện tại đọc được bao nhiêu thẻ
void sendCMD(uint8_t *data, size_t size);
void cleanBuffer();
void cleanCardsBuffer();
void cleanBeforeSendCardsBuffer();

#ifndef MULRFID_NEW_CODE
uint8_t saveCardInfo(CARD *card, uint8_t number);
#else
uint8_t saveCardInfo(CARD *card, uint8_t *data, uint8_t len);
#endif /* MULRFID_NEW_CODE */

#ifndef MULRFID_NEW_CODE
uint8_t filterCardInfo(char* epc);
uint8_t filterBeforeSendCardInfo(char* epc);
#else
uint8_t filterCardInfo(CARD* epc);
uint8_t filterBeforeSendCardInfo(CARD* epc);
#endif /* MULRFID_NEW_CODE */

void UHF_RFID_UART_Init(void);//Tầng BSP
char* getVersion(void); //Tầng handle
uint8_t pollingMultiple(uint16_t polling_count);
uint8_t stopMulPolling(void);
uint8_t selectUHFRFID(uint8_t *epc);
uint8_t setTxPower(uint16_t db);
uint16_t getTxPower(void);

uint16_t crc16_genibus(const uint8_t *data, size_t length);
#endif

#ifndef TEST_UHF_RFID_WATCH
#ifdef CONFIG_UHF_RFID_UART_NUM_0 
  #define UHF_RFID_UART UART_NUM_0
  #define TXD_UART_PIN (GPIO_NUM_1)
  #define RXD_UART_PIN (GPIO_NUM_3)
#elif CONFIG_UHF_RFID_UART_NUM_1 
  #define UHF_RFID_UART UART_NUM_1
  #define TXD_UART_PIN (GPIO_NUM_4)
  #define RXD_UART_PIN (GPIO_NUM_5)
#elif CONFIG_UHF_RFID_UART_NUM_2 
  #define UHF_RFID_UART UART_NUM_2
  #define TXD_UART_PIN (GPIO_NUM_17)
  #define RXD_UART_PIN (GPIO_NUM_16)
#endif

#ifdef CONFIG_UART_BAUDRATE_9600
  #define UHF_RFID_UART_BAUDRATE 9600
#elif CONFIG_UART_BAUDRATE_19200
  #define UHF_RFID_UART_BAUDRATE 19200
#elif CONFIG_UART_BAUDRATE_38400
  #define UHF_RFID_UART_BAUDRATE 38400
#elif CONFIG_UART_BAUDRATE_57600
  #define UHF_RFID_UART_BAUDRATE 57600
#elif CONFIG_UART_BAUDRATE_115200
  #define UHF_RFID_UART_BAUDRATE 115200
#endif

#define CR 0x0D
#define LF 0x0A

/*
PC or Host: <LF>S<CR>
Reader return message: <LF>S01234567<CR><LF>

*/

typedef struct {
    uint8_t result_cards;
    uint8_t rssi;
    uint8_t pc[2];
    uint8_t epc[12];
    char rssi_str[50];
    char pc_str[50];
    char epc_str[50];

  #ifdef MULRFID_NEW_CODE
    /* @attention: epc_len NEED for compareEPC() function */
    uint8_t epc_len;
  #endif /* MULRFID_NEW_CODE */
} CARD;

// Bảng tra cứu CRC-16/GENIBUS
static const uint16_t crc16_genibus_table[256] = {
    0x0000, 0x1021, 0x2042, 0x3063, 0x4084, 0x50A5, 0x60C6, 0x70E7,
    0x8108, 0x9129, 0xA14A, 0xB16B, 0xC18C, 0xD1AD, 0xE1CE, 0xF1EF,
    0x1231, 0x0210, 0x3273, 0x2252, 0x52B5, 0x4294, 0x72F7, 0x62D6,
    0x9339, 0x8318, 0xB37B, 0xA35A, 0xD3BD, 0xC39C, 0xF3FF, 0xE3DE,
    0x2462, 0x3443, 0x0420, 0x1401, 0x64E6, 0x74C7, 0x44A4, 0x5485,
    0xA56A, 0xB54B, 0x8528, 0x9509, 0xE5EE, 0xF5CF, 0xC5AC, 0xD58D,
    0x3653, 0x2672, 0x1611, 0x0630, 0x76D7, 0x66F6, 0x5695, 0x46B4,
    0xB75B, 0xA77A, 0x9719, 0x8738, 0xF7DF, 0xE7FE, 0xD79D, 0xC7BC,
    0x48C4, 0x58E5, 0x6886, 0x78A7, 0x0840, 0x1861, 0x2802, 0x3823,
    0xC9CC, 0xD9ED, 0xE98E, 0xF9AF, 0x8948, 0x9969, 0xA90A, 0xB92B,
    0x5AF5, 0x4AD4, 0x7AB7, 0x6A96, 0x1A71, 0x0A50, 0x3A33, 0x2A12,
    0xDBFD, 0xCBDC, 0xFBBF, 0xEB9E, 0x9B79, 0x8B58, 0xBB3B, 0xAB1A,
    0x6CA6, 0x7C87, 0x4CE4, 0x5CC5, 0x2C22, 0x3C03, 0x0C60, 0x1C41,
    0xEDAE, 0xFD8F, 0xCDEC, 0xDDCD, 0xAD2A, 0xBD0B, 0x8D68, 0x9D49,
    0x7E97, 0x6EB6, 0x5ED5, 0x4EF4, 0x3E13, 0x2E32, 0x1E51, 0x0E70,
    0xFF9F, 0xEFBE, 0xDFDD, 0xCFBC, 0xBF1B, 0xAF3A, 0x9F59, 0x8F78,
    0x9188, 0x81A9, 0xB1CA, 0xA1EB, 0xD10C, 0xC12D, 0xF14E, 0xE16F,
    0x1080, 0x00A1, 0x30C2, 0x20E3, 0x5004, 0x4025, 0x7046, 0x6067,
    0x83B9, 0x9398, 0xA3FB, 0xB3DA, 0xC33D, 0xD31C, 0xE37F, 0xF35E,
    0x02B1, 0x1290, 0x22F3, 0x32D2, 0x4235, 0x5214, 0x6277, 0x7256,
    0xB5EA, 0xA5CB, 0x95A8, 0x8589, 0xF56E, 0xE54F, 0xD52C, 0xC50D,
    0x34E2, 0x24C3, 0x14A0, 0x0481, 0x7466, 0x6447, 0x5424, 0x4405,
    0xA7DB, 0xB7FA, 0x8799, 0x97B8, 0xE75F, 0xF77E, 0xC71D, 0xD73C,
    0x26D3, 0x36F2, 0x0691, 0x16B0, 0x6657, 0x7676, 0x4615, 0x5634,
    0xD94C, 0xC96D, 0xF90E, 0xE92F, 0x99C8, 0x89E9, 0xB98A, 0xA9AB,
    0x5844, 0x4865, 0x7806, 0x6827, 0x18C0, 0x08E1, 0x3882, 0x28A3,
    0xCB7D, 0xDB5C, 0xEB3F, 0xFB1E, 0x8BF9, 0x9BD8, 0xABBB, 0xBB9A,
    0x4A75, 0x5A54, 0x6A37, 0x7A16, 0x0AF1, 0x1AD0, 0x2AB3, 0x3A92,
    0xFD2E, 0xED0F, 0xDD6C, 0xCD4D, 0xBDAA, 0xAD8B, 0x9DE8, 0x8DC9,
    0x7C26, 0x6C07, 0x5C64, 0x4C45, 0x3CA2, 0x2C83, 0x1CE0, 0x0CC1,
    0xEF1F, 0xFF3E, 0xCF5D, 0xDF7C, 0xAF9B, 0xBFBA, 0x8FD9, 0x9FF8,
    0x6E17, 0x7E36, 0x4E55, 0x5E74, 0x2E93, 0x3EB2, 0x0ED1, 0x1EF0
};

char* hex2str(uint8_t num);

uint8_t waitMsg(unsigned long timerout);
void sendCMD(uint8_t *data, size_t size);
void cleanBuffer();
void cleanCardsBuffer();
void cleanBeforeSendCardsBuffer();

#ifndef MULRFID_NEW_CODE
uint8_t saveCardInfo(CARD *card, uint8_t number);
#else
uint8_t saveCardInfo(CARD *card, uint8_t *data, uint8_t len);
#endif /* MULRFID_NEW_CODE */

#ifndef MULRFID_NEW_CODE
uint8_t filterCardInfo(char* epc);
uint8_t filterBeforeSendCardInfo(char* epc);
#else
uint8_t filterCardInfo(CARD* epc);
uint8_t filterBeforeSendCardInfo(CARD* epc);
#endif /* MULRFID_NEW_CODE */

void UHF_RFID_UART_Init(void);
char* getVersion(void);
// char* selectInfo(void);
// uint8_t pollingOnce(void);
uint8_t pollingMultiple(void);
uint8_t selectUHFRFID(uint8_t *epc);
uint8_t setTxPower(int8_t db);
int16_t getTxPower(void);

// uint8_t writeCard(uint8_t *data, size_t size, uint8_t membank, uint16_t sa,
//                 uint32_t access_password);
// uint8_t readCard(uint8_t *data, size_t size, uint8_t membank, uint16_t sa,
//                 uint32_t access_password);
// uint8_t stopMulPolling(void);

// uint8_t selectDenseReaderMode(void);
// uint8_t selectHighSensitivityMode(void);

uint16_t crc16_genibus(const uint8_t *data, size_t length);
#endif
#endif